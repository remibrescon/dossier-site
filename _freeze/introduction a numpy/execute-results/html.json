{
  "hash": "eb9a0441de961ee621815415d05c0b60",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Numpy?\"\n---\n\n**introduction à numpy**\n\nNumPy est une bibliothèque Python utilisée principalement pour le calcul numérique.\n Elle fournit des structures de données de base telles que les tableaux multidimensionnels (ndarrays), ainsi que des fonctions permettant d'effectuer des opérations mathématiques et statistiques sur ces tableaux. Voici un résumé de ses principales fonctionnalités et utilisations :\n\n    Tableaux multidimensionnels(ndarrays) :\n    NumPy permet de créer et de manipuler des tableaux efficacement.\n    Ces tableaux sont plus performants que les listes Python\n    pour le stockage de données numériques\n\n    Opérations mathématiques et statistiques :\n    NumPy fournit beaucoup de fonctions pour effectuer des opérations mathématiques \n    et statistiques sur les tableaux, telles que la somme, la moyenne, l'écart-type, etc.\n\n    Broadcasting :\n    NumPy utilise le broadcasting pour effectuer des opérations \n    sur des tableaux de formes différentes de manière transparente. \n    Cela permet d'écrire du code plus concis et plus lisible.\n\n    Intégration avec d'autres bibliothèques :\n    NumPy est souvent utilisé en conjonction avec d'autres bibliothèques \n    Python telles que Matplotlib(pour la visualisation de données),\n    SciPy (pour les calculs scientifiques avancés), et Pandas (pour l'analyse de données).\n\n    Traitement d'images et de sons :\n    NumPy est largement utilisé pour le traitement d'images \n    et de sons en raison de sa capacité à manipuler efficacement des tableaux multidimensionnels.\n\nEn résumé, NumPy est une bibliothèque essentielle pour les applications nécessitant \ndes calculs numériques rapides et efficaces en Python, tels que le calcul scientifique,\nl'apprentissage automatique, l'analyse de données, etc.\n\n**mise a pratique numpy:**\nPour commencer avec numpy vous aurez besoin de l'installer, pour cela il faudra :\n              \"pip install numpy\" Dans le terminal\nUne fois installé on va devoir l'importer dans python:\n              \"import numpy as np\"\n\nLes tableaux (en anglais, array) peuvent être créés avec numpy.array(). On utilise des crochets pour délimiter les listes d’éléments dans les tableaux.\n\n::: {#c8dc7585 .cell execution_count=1}\n``` {.python .cell-code}\n# pip install numpy\nimport numpy as np\nA= np.array([2,6,3,9])\nprint(A)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2 6 3 9]\n```\n:::\n:::\n\n\nil est possible de crée un tableau 2D:\n\n::: {#25a4096e .cell execution_count=2}\n``` {.python .cell-code}\nb = np.array([[1, 3, 6], [2, 4, 5]])\nprint(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1 3 6]\n [2 4 5]]\n```\n:::\n:::\n\n\nOn peut crée des tableau avec numpy en utilisant:\n               np.random.randint\n\n::: {#c70ca0d0 .cell execution_count=3}\n``` {.python .cell-code}\nc = np.random.randint(low=0, high=10, size=(10, 5))\nprint(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[9 0 2 1 9]\n [8 7 4 5 1]\n [6 6 8 3 7]\n [7 5 2 6 9]\n [8 8 7 3 7]\n [5 8 2 4 6]\n [5 5 7 6 9]\n [0 2 1 3 0]\n [9 8 5 7 6]\n [0 5 3 5 2]]\n```\n:::\n:::\n\n\nOn peut crée créer des tableaux avec des valeurs dans un intervalle spécifié\nen utilisant La fonction: `numpy.arange` \n\n::: {#e4288ca3 .cell execution_count=4}\n``` {.python .cell-code}\nd = np.arange(0, 100, 3)\nprint(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[ 0  3  6  9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69\n 72 75 78 81 84 87 90 93 96 99]\n```\n:::\n:::\n\n\non peut utiliser plusieurs fonction arithmetique,\n\"np.add(),np.subtract(),np.multiply(),np.divide(),np.power()\"\nvoici 2 example:\n\nmultiplication\n\n::: {#6d7eec02 .cell execution_count=5}\n``` {.python .cell-code}\na = np.array([1, 2, 3])\nresult = np.multiply(a, 5)\nprint(result) \n\nb=np.array([1,4,6])\nresult= np.subtract(b,5)\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[ 5 10 15]\n[-4 -1  1]\n```\n:::\n:::\n\n\nNous pouvons aussi utiliser la trigonometrie:\n          \"np.sin(),np.cos(),np.tan()\"\n\n::: {#6e0a5a76 .cell execution_count=6}\n``` {.python .cell-code}\nangles = np.array([0, np.pi/2, np.pi])\nsin_values = np.tan(angles)\nprint(sin_values)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[ 0.00000000e+00  1.63312394e+16 -1.22464680e-16]\n```\n:::\n:::\n\n\nPour les fonction statistique nous utilisons:\n         np.mean(),np.median(),np.std()\n\n::: {#2754e17d .cell execution_count=7}\n``` {.python .cell-code}\nE = np.array([2, 6, 7, 10])\nE = np.mean(E)\nprint(E) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6.25\n```\n:::\n:::\n\n\nPour en finir avec numpy nous pouvons arrondir les nombres avec:\n      np.round(),np.floor(),np.ceil()\n\n::: {#d66c64e9 .cell execution_count=8}\n``` {.python .cell-code}\nF= np.array([np.pi*2,np.pi])\nF = np.round(F)\nprint(F) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[6. 3.]\n```\n:::\n:::\n\n\n",
    "supporting": [
      "introduction a numpy_files"
    ],
    "filters": [],
    "includes": {}
  }
}
{
  "hash": "299eac07daa519c547df572448c2241c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Data visualisation\"\n---\n\n## 1. La Data Visualisation c'est quoi?\n\nLa visualisation de données en Python, c'est l'art de représenter des informations complexes sous forme de graphiques, de tableaux ou d'autres éléments visuels faciles à comprendre. En utilisant des bibliothèques comme Matplotlib, Seaborn ou Plotly, les développeurs peuvent transformer des données brutes en visualisations attrayantes et informatives, ce qui permet à quiconque, même sans connaissances techniques avancées, de tirer des conclusions à partir des données.\n\n**Import des bibliotheques utile pour la Data Visualisation**\n   Pour faire de la Data Visualisation de nos données nous avons besoins d'importer \"Matplotlib\"\n\n il ets possible de faire plusieurs graphiques differents:\n\n- histogramme = \"hist\" -> plt.hist(\"les données utile sur les axes\")\n\n- diagramme en barre = \"bar\" -> plt.bar(\"les données utile sur les axes\")\n\n- boite a moustache =\" boxplot\" -> plt.boxplot(\"les données utile sur les axes\")\n\n- nuage de point = \"scatterplot\" -> plt.scatter(\"les données utile sur les axes\")\n\n\n  Pour les graphiques d'un dataframe il faut mettre \"df.plot.(plus le nom du graphique besoins)\", par exemple pour une boite a moustache on mettra \"df.plot.box\".\n\n Nous allons voir le diagramme en barre \n\n::: {#34ec8486 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n**On utilisera la meme base de donnée que pour l'introduction afin de crée le graphique**\n\n::: {#0c540e62 .cell execution_count=2}\n``` {.python .cell-code}\nJeux = [\n    [\"GameBoy\", 1500, \"Tetris\"],\n    [\"Playstation\", 1994, \"Call-of-duty\"],\n    [\"GameBoy-ADV\", 520, \"Emeraude\"],\n    [\"XBox\", 2001, \"Farming-simulator\"]\n]\ncolumns = ['Console', 'Annee', 'Titre']\n\ndf = pd.DataFrame(Jeux, columns=columns)\n\n# Permet de generer un graphique en bar\ndf.plot.bar( x='Console', y='Annee')\n```\n\n::: {.cell-output .cell-output-display}\n![](Data visualisation_files/figure-html/cell-3-output-1.png){width=583 height=514}\n:::\n:::\n\n\nOn peut egalement mettre un titre general et sur les axes X et Y du graphique et changer la couleur \n\n::: {#882f6cf8 .cell execution_count=3}\n``` {.python .cell-code}\n# Permet de generer un graphique en bar\ndf.plot.bar( x='Console', y='Annee', color='skyblue')\n\n# permet de modifier le titre et le nom des axes\nplt.xlabel('Console')\nplt.ylabel('Année de sortie')\nplt.title('Consoles de jeux vidéo par année de sortie')\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nText(0.5, 1.0, 'Consoles de jeux vidéo par année de sortie')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Data visualisation_files/figure-html/cell-4-output-2.png){width=602 height=535}\n:::\n:::\n\n\nRegardons la boite a moustache\n\n::: {#5d1d7c9a .cell execution_count=4}\n``` {.python .cell-code}\ndf.plot.box( x='Console', y='Annee')\n```\n\n::: {.cell-output .cell-output-display}\n![](Data visualisation_files/figure-html/cell-5-output-1.png){width=583 height=411}\n:::\n:::\n\n\n",
    "supporting": [
      "Data visualisation_files"
    ],
    "filters": [],
    "includes": {}
  }
}
{
  "hash": "02c436fdf47adb85fa08efafbc0f10e5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"introduction python Pandas\"\n---\n\nThis is a Quarto website.\n\nTo learn more about Quarto websites visit <https://quarto.org/docs/websites>.\n\n\n# bienvenue dans l'introduction a Pandas\n\n## Sommaire \n\n- 1. C'est quoi Python ?\n- 2. Les fondamentaux de Pandas.\n- 3. Introduction a Pandas\n  - 3.1 Data visualisation \n- 4. exercice \n\n\n\n\n\n\n## 1. C’est quoi python ?\nLe nom Python vient d’un hommage à la série télévisée **Monty Python’s Flying Circus** dont G. van Rossum est fan. La première version publique de ce langage a été publiée en 1991.\n\nCe langage de programmation présente de nombreuses caractéristiques intéressantes :\n\n- Il est multiplateforme. C’est-à-dire qu’il fonctionne sur de nombreux systèmes d’exploitation : Windows, Mac OS X, Linux, Android, iOS, depuis les mini-ordinateurs Raspberry Pi jusqu’aux supercalculateurs.\n\n- Il est gratuit. Vous pouvez l’installer sur autant d’ordinateurs que vous voulez (même sur votre téléphone !).\n\n- C’est un langage de haut niveau. Il demande relativement peu de connaissance sur le fonctionnement d’un ordinateur pour être utilisé.\n\n- C’est un langage interprété. Un script Python n’a pas besoin d’être compilé pour être exécuté, contrairement à des langages comme le C ou le C++.\n\n- Il est orienté objet. C’est-à-dire qu’il est possible de concevoir des entités qui miment celles du monde réel (une cellule, une protéine, un atome, etc.) avec un certain nombre de règles de fonctionnement et d’interactions.\n\n- Il est relativement simple à prendre en main\n\n\n## 2. Les fondamentaux de Pandas.\n\n - Variable(type natif) et opérations\n - Commentaires et afficahges\n - Strucutre de controle: opérateurs, conditions, boucles \n - Types de données (structure séquentielles)\n - Fonctions: définitions et appels\n\n\n### 2.1 Variables (types natifs) \n\n**Variables** : Les variables sont des conteneurs permettant de stocker des valeurs de données, telles que des nombres ou des chaînes de caractères.\n\nPar exemple, `x = 10` crée une variable nommée x avec la valeur 10. Python est un langage à typage dynamique, ce qui signifie que le type de la variable est déterminé au moment de l'exécution.\n\n- Affectation **(=)**.\n- Python détermine automatiquement le type de données en fonction de la valeur attribuée.\n- Ecraser les valeurs des variables en les réaffectant.\n- Sensible à la casse : \"X\" et \"x\" sont deux variables différentes\n- Imprimer plusieurs variables dans une seule instruction print avec **(,)**\n- Plusieurs valeurs à plusieurs variables ou plusieurs variables à une seule valeur sur une seule ligne.\n- Dénomination des variables incluent :\n    - la casse camel : *testVariableCase*\n    - la casse Pascal : *TestVariableCase*\n    - la casse serpent : *test_variable_case*\n\n- Evitez de:\n    - commencer les noms de variables par des chiffres\n    - utiliser des symboles tels que des tirets ou des espaces\n    - mélanger des chaînes de caractères et des nombres entiers directement dans la concaténation.\n\n**Types natifs** : Les types de données courants en Python incluent :\n\n- **Entiers** (`int`) : Nombres sans partie décimale. Exemple : `5`, `-3`.\n- **Nombres Complexes** (`complex`) : Nombres avec une partie réelle et une partie imaginaire. Exemple : `3 + 4j`.\n- **Flottants** (`float`) : Nombres avec une partie décimale. Exemple : `3.14`, `-0.001`.\n- **Chaîne de caractères** (`str`) : Une séquence de caractères, entourée de guillemets simples ou doubles.\n- **Booléens** (bool) : Représentent deux valeurs : `True` (Vrai) et `False` (Faux).. Le type booléen a seulement deux valeurs : True et False. Ils sont souvent le résultat d'expressions de comparaison ou de conditions logiques.\n\n::: {#e18b22c1 .cell execution_count=1}\n``` {.python .cell-code}\nNom = \"Rémi\"\nAge = 29\nTaille = 1.77\nestvrai = True\nestfaux = False\n\nprint(\"La variable est de type:\", type(Nom))\nprint(\"la variable age est de type :\",type(Age))\nprint(\"la variable taille est de type :\",type(Taille))\nprint(\"la variable estVrai est de type :\",type(estvrai))\nprint(\"la variable estFaux est de type :\",type(estfaux))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLa variable est de type: <class 'str'>\nla variable age est de type : <class 'int'>\nla variable taille est de type : <class 'float'>\nla variable estVrai est de type : <class 'bool'>\nla variable estFaux est de type : <class 'bool'>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}
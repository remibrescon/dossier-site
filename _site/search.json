[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "introduction python Pandas",
    "section": "",
    "text": "C’est quoi Pandas ?\n\n\nLes fondamentaux de Pandas.\n\n\nIntroduction a Pandas\n\n\n3.1 Data visualisation\n\n\nexercice\n\n\ncorrige"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html#cest-qu",
    "href": "index.html#cest-qu",
    "title": "introduction python",
    "section": "1. C’est qu",
    "text": "1. C’est qu\nLe nom Python vient d’un hommage à la série télévisée Monty Python’s Flying Circus dont G. van Rossum est fan. La première version publique de ce langage a été publiée en 1991.\nCe langage de programmation présente de nombreuses caractéristiques intéressantes :\n\nIl est multiplateforme. C’est-à-dire qu’il fonctionne sur de nombreux systèmes d’exploitation : Windows, Mac OS X, Linux, Android, iOS, depuis les mini-ordinateurs Raspberry Pi jusqu’aux supercalculateurs.\nIl est gratuit. Vous pouvez l’installer sur autant d’ordinateurs que vous voulez (même sur votre téléphone !).\nC’est un langage de haut niveau. Il demande relativement peu de connaissance sur le fonctionnement d’un ordinateur pour être utilisé.\nC’est un langage interprété. Un script Python n’a pas besoin d’être compilé pour être exécuté, contrairement à des langages comme le C ou le C++.\nIl est orienté objet. C’est-à-dire qu’il est possible de concevoir des entités qui miment celles du monde réel (une cellule, une protéine, un atome, etc.) avec un certain nombre de règles de fonctionnement et d’interactions.\nIl est relativement simple à prendre en main"
  },
  {
    "objectID": "index.html#cest-quoi-python",
    "href": "index.html#cest-quoi-python",
    "title": "introduction python Pandas",
    "section": "1. C’est quoi python ?",
    "text": "1. C’est quoi python ?\nLe nom Python vient d’un hommage à la série télévisée Monty Python’s Flying Circus dont G. van Rossum est fan. La première version publique de ce langage a été publiée en 1991.\nCe langage de programmation présente de nombreuses caractéristiques intéressantes :\n\nIl est multiplateforme. C’est-à-dire qu’il fonctionne sur de nombreux systèmes d’exploitation : Windows, Mac OS X, Linux, Android, iOS, depuis les mini-ordinateurs Raspberry Pi jusqu’aux supercalculateurs.\nIl est gratuit. Vous pouvez l’installer sur autant d’ordinateurs que vous voulez (même sur votre téléphone !).\nC’est un langage de haut niveau. Il demande relativement peu de connaissance sur le fonctionnement d’un ordinateur pour être utilisé.\nC’est un langage interprété. Un script Python n’a pas besoin d’être compilé pour être exécuté, contrairement à des langages comme le C ou le C++.\nIl est orienté objet. C’est-à-dire qu’il est possible de concevoir des entités qui miment celles du monde réel (une cellule, une protéine, un atome, etc.) avec un certain nombre de règles de fonctionnement et d’interactions.\nIl est relativement simple à prendre en main"
  },
  {
    "objectID": "index.html#les-fondamentaux-de-python.",
    "href": "index.html#les-fondamentaux-de-python.",
    "title": "introduction python",
    "section": "2. Les fondamentaux de python.",
    "text": "2. Les fondamentaux de python.\n\nVariable(type natif) et opérations\nCommentaires et afficahges\nStrucutre de controle: opérateurs, conditions, boucles\nTypes de données (structure séquentielles)\nFonctions: définitions et appels\n\n\n2.1 Variables (types natifs)\nVariables : Les variables sont des conteneurs permettant de stocker des valeurs de données, telles que des nombres ou des chaînes de caractères.\nPar exemple, x = 10 crée une variable nommée x avec la valeur 10. Python est un langage à typage dynamique, ce qui signifie que le type de la variable est déterminé au moment de l’exécution.\n\nAffectation (=).\nPython détermine automatiquement le type de données en fonction de la valeur attribuée.\nEcraser les valeurs des variables en les réaffectant.\nSensible à la casse : “X” et “x” sont deux variables différentes\nImprimer plusieurs variables dans une seule instruction print avec (,)\nPlusieurs valeurs à plusieurs variables ou plusieurs variables à une seule valeur sur une seule ligne.\nDénomination des variables incluent :\n\nla casse camel : testVariableCase\nla casse Pascal : TestVariableCase\nla casse serpent : test_variable_case\n\nEvitez de:\n\ncommencer les noms de variables par des chiffres\nutiliser des symboles tels que des tirets ou des espaces\nmélanger des chaînes de caractères et des nombres entiers directement dans la concaténation.\n\n\nTypes natifs : Les types de données courants en Python incluent : - Entiers (int) : Nombres sans partie décimale. Exemple : 5, -3. - Nombres Complexes (complex) : Nombres avec une partie réelle et une partie imaginaire. Exemple : 3 + 4j. - Flottants (float) : Nombres avec une partie décimale. Exemple : 3.14, -0.001. - Chaîne de caractères (str) : Une séquence de caractères, entourée de guillemets simples ou doubles. - Booléens (bool) : Représentent deux valeurs : True (Vrai) et False (Faux).. Le type booléen a seulement deux valeurs : True et False. Ils sont souvent le résultat d’expressions de comparaison ou de conditions logiques.\n\nNom = “Rémi”\nAge = 29\nTaille = 1.77\nestvrai = true\nestfaux = false\n\nprint(“la variable nom est de type :”, type(nom)) print(“la variable age est de type :”,type(age)) print(“la variable taille est de type :”,type(taille)) print(“la variable estVrai est de type :”,type(estVrai)) print(“la variable estFaux est de type :”,type(estFaux))\n\nconvertion de types\nLa conversion de types"
  },
  {
    "objectID": "index.html#sommaire",
    "href": "index.html#sommaire",
    "title": "introduction python Pandas",
    "section": "",
    "text": "C’est quoi Pandas ?\n\n\nLes fondamentaux de Pandas.\n\n\nIntroduction a Pandas\n\n\n3.1 Data visualisation\n\n\nexercice\n\n\ncorrige"
  },
  {
    "objectID": "index.html#les-fondamentaux-de-python.-1",
    "href": "index.html#les-fondamentaux-de-python.-1",
    "title": "introduction python",
    "section": "2. Les fondamentaux de python.",
    "text": "2. Les fondamentaux de python.\n\nVariable(type natif) et opérations\nCommentaires et afficahges\nStrucutre de controle: opérateurs, conditions, boucles\nTypes de données (structure séquentielles)\nFonctions: définitions et appels\n\n\n2.1 Variables (types natifs)\nVariables : Les variables sont des conteneurs permettant de stocker des valeurs de données, telles que des nombres ou des chaînes de caractères.\nPar exemple, x = 10 crée une variable nommée x avec la valeur 10. Python est un langage à typage dynamique, ce qui signifie que le type de la variable est déterminé au moment de l’exécution.\n\nAffectation (=).\nPython détermine automatiquement le type de données en fonction de la valeur attribuée.\nEcraser les valeurs des variables en les réaffectant.\nSensible à la casse : “X” et “x” sont deux variables différentes\nImprimer plusieurs variables dans une seule instruction print avec (,)\nPlusieurs valeurs à plusieurs variables ou plusieurs variables à une seule valeur sur une seule ligne.\nDénomination des variables incluent :\n\nla casse camel : testVariableCase\nla casse Pascal : TestVariableCase\nla casse serpent : test_variable_case\n\nEvitez de:\n\ncommencer les noms de variables par des chiffres\nutiliser des symboles tels que des tirets ou des espaces\nmélanger des chaînes de caractères et des nombres entiers directement dans la concaténation.\n\n\nTypes natifs : Les types de données courants en Python incluent :\n\nEntiers (int) : Nombres sans partie décimale. Exemple : 5, -3.\nNombres Complexes (complex) : Nombres avec une partie réelle et une partie imaginaire. Exemple : 3 + 4j.\nFlottants (float) : Nombres avec une partie décimale. Exemple : 3.14, -0.001.\nChaîne de caractères (str) : Une séquence de caractères, entourée de guillemets simples ou doubles.\nBooléens (bool) : Représentent deux valeurs : True (Vrai) et False (Faux).. Le type booléen a seulement deux valeurs : True et False. Ils sont souvent le résultat d’expressions de comparaison ou de conditions logiques.\n\n\nNom = \"Rémi\"\nAge = 29\nTaille = 1.77\nestvrai = True\nestfaux = False\n\nprint(\"La variable est de type:\", type(Nom))\nprint(\"la variable age est de type :\",type(Age))\nprint(\"la variable taille est de type :\",type(Taille))\nprint(\"la variable estVrai est de type :\",type(estvrai))\nprint(\"la variable estFaux est de type :\",type(estfaux))\n\nLa variable est de type: &lt;class 'str'&gt;\nla variable age est de type : &lt;class 'int'&gt;\nla variable taille est de type : &lt;class 'float'&gt;\nla variable estVrai est de type : &lt;class 'bool'&gt;\nla variable estFaux est de type : &lt;class 'bool'&gt;"
  },
  {
    "objectID": "index.html#les-fondamentaux-de-pandas.",
    "href": "index.html#les-fondamentaux-de-pandas.",
    "title": "introduction python Pandas",
    "section": "2. Les fondamentaux de Pandas.",
    "text": "2. Les fondamentaux de Pandas.\n\nVariable(type natif) et opérations\nCommentaires et afficahges\nStrucutre de controle: opérateurs, conditions, boucles\nTypes de données (structure séquentielles)\nFonctions: définitions et appels\n\n\n2.1 Variables (types natifs)\nVariables : Les variables sont des conteneurs permettant de stocker des valeurs de données, telles que des nombres ou des chaînes de caractères.\nPar exemple, x = 10 crée une variable nommée x avec la valeur 10. Python est un langage à typage dynamique, ce qui signifie que le type de la variable est déterminé au moment de l’exécution.\n\nAffectation (=).\nPython détermine automatiquement le type de données en fonction de la valeur attribuée.\nEcraser les valeurs des variables en les réaffectant.\nSensible à la casse : “X” et “x” sont deux variables différentes\nImprimer plusieurs variables dans une seule instruction print avec (,)\nPlusieurs valeurs à plusieurs variables ou plusieurs variables à une seule valeur sur une seule ligne.\nDénomination des variables incluent :\n\nla casse camel : testVariableCase\nla casse Pascal : TestVariableCase\nla casse serpent : test_variable_case\n\nEvitez de:\n\ncommencer les noms de variables par des chiffres\nutiliser des symboles tels que des tirets ou des espaces\nmélanger des chaînes de caractères et des nombres entiers directement dans la concaténation.\n\n\nTypes natifs : Les types de données courants en Python incluent :\n\nEntiers (int) : Nombres sans partie décimale. Exemple : 5, -3.\nNombres Complexes (complex) : Nombres avec une partie réelle et une partie imaginaire. Exemple : 3 + 4j.\nFlottants (float) : Nombres avec une partie décimale. Exemple : 3.14, -0.001.\nChaîne de caractères (str) : Une séquence de caractères, entourée de guillemets simples ou doubles.\nBooléens (bool) : Représentent deux valeurs : True (Vrai) et False (Faux).. Le type booléen a seulement deux valeurs : True et False. Ils sont souvent le résultat d’expressions de comparaison ou de conditions logiques.\n\n\nNom = \"Rémi\"\nAge = 29\nTaille = 1.77\nestvrai = True\nestfaux = False\n\nprint(\"La variable est de type:\", type(Nom))\nprint(\"la variable age est de type :\",type(Age))\nprint(\"la variable taille est de type :\",type(Taille))\nprint(\"la variable estVrai est de type :\",type(estvrai))\nprint(\"la variable estFaux est de type :\",type(estfaux))\n\nLa variable est de type: &lt;class 'str'&gt;\nla variable age est de type : &lt;class 'int'&gt;\nla variable taille est de type : &lt;class 'float'&gt;\nla variable estVrai est de type : &lt;class 'bool'&gt;\nla variable estFaux est de type : &lt;class 'bool'&gt;"
  },
  {
    "objectID": "C'est quoi Pandas.html",
    "href": "C'est quoi Pandas.html",
    "title": "c’est quoi Pandas ?",
    "section": "",
    "text": "5.2 Pandas\nLe module pandas est une bibliothèque de programmation Python extrêmement populaire, utilisée principalement pour l’analyse de données. Elle fournit des structures de données puissantes et flexibles conçues pour travailler facilement avec des données structurées (comme les tableaux et les séries temporelles) de manière intuitive et efficace. Voici quelques aspects clés de pandas :\n\nStructures de données principales :\n\nDataFrame : une structure de données tabulaire avec des lignes et des colonnes étiquetées. C’est similaire à une feuille de calcul Excel ou à une table SQL.\nSeries : une colonne dans un DataFrame. C’est similaire à une liste en Python, mais avec des fonctionnalités supplémentaires offertes par pandas."
  },
  {
    "objectID": "c'est quoi pandas.html",
    "href": "c'est quoi pandas.html",
    "title": "C’est quoi Pandas ?",
    "section": "",
    "text": "5.2 Pandas\nLe module pandas est une bibliothèque de programmation Python extrêmement populaire, utilisée principalement pour l’analyse de données. Elle fournit des structures de données puissantes et flexibles conçues pour travailler facilement avec des données structurées (comme les tableaux et les séries temporelles) de manière intuitive et efficace. Voici quelques aspects clés de pandas :\n\nStructures de données principales :\n\nDataFrame : une structure de données tabulaire avec des lignes et des colonnes étiquetées. C’est similaire à une feuille de calcul Excel ou à une table SQL.\nSeries : une colonne dans un DataFrame. C’est similaire à une liste en Python, mais avec des fonctionnalités supplémentaires offertes par pandas.\n\nManipulation de données :\n\nVous pouvez effectuer des opérations courantes de manipulation de données telles que le tri, le filtrage, la fusion, la jointure et la concaténation.\npandas est excellent pour gérer des données manquantes, remplacer des valeurs, grouper des données, etc.\n\nAnalyse de données :\n\nIl offre des outils pour l’exploration de données, comme le calcul de statistiques et la visualisation.\nVous pouvez facilement agir sur chaque colonne d’un DataFrame, par exemple pour appliquer des fonctions mathématiques ou de résumé statistique.\n\nInterfaçage avec d’autres formats de données :\n\npandas peut lire et écrire dans différents formats de fichiers comme CSV, Excel, JSON, HTML, SQL, etc.\n\nAvantages en termes de performance :\n\nBien que Python soit un langage interprété, pandas est construit sur des bibliothèques comme NumPy, ce qui lui permet d’être rapide et efficace.\n\nUtilisation dans divers domaines :\n\nIl est largement utilisé dans la finance, l’économie, la statistique, l’analyse de données, la science des données, et plus encore.\n\n\nPour commencer avec pandas, vous devez d’abord l’installer (si ce n’est pas déjà fait) en utilisant pip :"
  },
  {
    "objectID": "c_est_quoi_pandas.html",
    "href": "c_est_quoi_pandas.html",
    "title": "C’est quoi Pandas ?",
    "section": "",
    "text": "5.2 Pandas\nLe module pandas est une bibliothèque de programmation Python extrêmement populaire, utilisée principalement pour l’analyse de données. Elle fournit des structures de données puissantes et flexibles conçues pour travailler facilement avec des données structurées (comme les tableaux et les séries temporelles) de manière intuitive et efficace. Voici quelques aspects clés de pandas."
  },
  {
    "objectID": "c_est_quoi_Pandas.html",
    "href": "c_est_quoi_Pandas.html",
    "title": "C’est quoi Pandas ?",
    "section": "",
    "text": "5.2 Pandas\nLe module pandas est une bibliothèque de programmation Python extrêmement populaire, utilisée principalement pour l’analyse de données. Elle fournit des structures de données puissantes et flexibles conçues pour travailler facilement avec des données structurées (comme les tableaux et les séries temporelles) de manière intuitive et efficace. Voici quelques aspects clés de pandas :\n\nStructures de données principales :\n\nDataFrame : une structure de données tabulaire avec des lignes et des colonnes étiquetées. C’est similaire à une feuille de calcul Excel ou à une table SQL.\nSeries : une colonne dans un DataFrame. C’est similaire à une liste en Python, mais avec des fonctionnalités supplémentaires offertes par pandas.\n\nManipulation de données :\n\nVous pouvez effectuer des opérations courantes de manipulation de données telles que le tri, le filtrage, la fusion, la jointure et la concaténation.\npandas est excellent pour gérer des données manquantes, remplacer des valeurs, grouper des données, etc.\n\nPour commencer avec Pandas vous aurez besoin de l’installer, pour cela il faudra : “pip install pandas” Dans le terminal Une fois installé on va devoir l’importer dans python: ” import pandas as pd”\n\nPour commenecer nous allons voir les series exemple:\npip install pandas # seulement dans le terminal\nimport pandas as pd\nall = pd.Series([29,“remi”, 1.77, “hello”]) print(all)"
  },
  {
    "objectID": "Sommaire.html",
    "href": "Sommaire.html",
    "title": "introduction python Pandas",
    "section": "",
    "text": "introduction a numpy\n\n\nC’est quoi Pandas ?\n\n\nIntroduction a Pandas\n\n\nData visualisation\n\n\nExercice\n\n\nCorriges\n\n\n\n\n\nPandas est un bibliotheque utiliser dans python utilisé pour l’analyse de donnée. Elle offre des structures de données flexibles et puissantes pour travailler avec des données tabulaires et temporelles. Voici quelques points clés à retenir sur Pandas :\nStructures de données principales : - DataFrame : Un tableau bidimensionnel avec des lignes et des colonnes étiquetées, similaire à une feuille de calcul Excel ou à une table SQL. - Series : Une structure unidimensionnelle similaire à un tableau ou une liste, mais avec des fonctionnalités supplémentaires, comme un index.\nPandas est largement utilisé dans le domaine de la science des données, de l’analyse de données, de la finance et de nombreux autres domaines où la manipulation et l’analyse de données sont nécessaires.\nPandas est un bibliotheque utiliser dans python utilisé pour l’analyse de donnée. Elle offre des structures de données flexibles et puissantes pour travailler avec des données tabulaires et temporelles. Voici quelques points clés à retenir sur Pandas :\nStructures de données principales : - DataFrame : Un tableau bidimensionnel avec des lignes et des colonnes étiquetées, similaire à une feuille de calcul Excel ou à une table SQL. - Series : Une structure unidimensionnelle similaire à un tableau ou une liste, mais avec des fonctionnalités supplémentaires, comme un index.\nPandas est largement utilisé dans le domaine de la science des données, de l’analyse de données, de la finance et de nombreux autres domaines où la manipulation et l’analyse de données sont nécessaires."
  },
  {
    "objectID": "Sommaire.html#sommaire",
    "href": "Sommaire.html#sommaire",
    "title": "introduction python Pandas",
    "section": "",
    "text": "introduction a numpy\n\n\nC’est quoi Pandas ?\n\n\nIntroduction a Pandas\n\n\nData visualisation\n\n\nExercice\n\n\nCorriges"
  },
  {
    "objectID": "Introduction a Pandas.html",
    "href": "Introduction a Pandas.html",
    "title": "C’est quoi Pandas ?",
    "section": "",
    "text": "2. Pandas\nLe module pandas est une bibliothèque de programmation Python extrêmement populaire, utilisée principalement pour l’analyse de données. Elle fournit des structures de données puissantes et flexibles conçues pour travailler facilement avec des données structurées (comme les tableaux et les séries temporelles) de manière intuitive et efficace. Voici quelques aspects clés de pandas :\n\nStructures de données principales :\n\nSeries : une colonne dans un DataFrame. C’est similaire à une liste en Python, mais avec des fonctionnalités supplémentaires offertes par pandas.\nDataFrame : une structure de données tabulaire avec des lignes et des colonnes étiquetées. C’est similaire à une feuille de calcul Excel ou à une table SQL.\n\nManipulation de données :\n\nVous pouvez effectuer des opérations courantes de manipulation de données telles que le tri, le filtrage, la fusion, la jointure et la concaténation.\npandas est excellent pour gérer des données manquantes, remplacer des valeurs, grouper des données, etc.\n\nAnalyse de données\nPandas permet de faire de l’analyse de donnée:\n\nIl offre des outils pour l’exploration de données, comme le calcul de statistiques et la visualisation.\nVous pouvez facilement agir sur chaque colonne d’un DataFrame, par exemple pour appliquer des fonctions mathématiques ou de résumé statistique.\n\n\nPandas permet également de lire plusieurs de format de fichier differents comme CSV, HTML, SQL,…\nMise en pratique Pour commencer avec Pandas vous aurez besoin de l’installer, pour cela il faudra : “pip install pandas” Dans le terminal Une fois installé on va devoir l’importer dans python: ” import pandas as pd”\nPour importer un fichier CSV nous pouvons l’importer comme ca: - games = pd.read_csv(“../data/vgsalesGlobale.csv”) # dans les parenthèses mettre le chemin vers votre fichier à importer\nPour commencer nous allons voir les series exemple:\n\n# pip install pandas\nimport pandas as pd\n\nall = pd.Series([29,\"remi\", 1.77, \"hello\"])\nprint(all)\n\n0       29\n1     remi\n2     1.77\n3    hello\ndtype: object\n\n\nNous allons voir ensuite les DataFrame\nexemple:\n\nimport pandas as pd\n\nJeux = [\n         [\"GameBoy\", 1983,\"Tetris\"],\n         [\"Playstation\", 1994,\"Call-of-duty\"],\n         [\"GameBoy-ADV\",2001, \"Emeraude\"],\n         [\"XBox\", 2001, \"Farming-simulator\"]\n]\n\ncolumns = ['Console', 'Annee', 'Titre']\ndf = pd.DataFrame(Jeux, columns=columns)\ndf.head()\n\n\n\n\n\n\n\n\n\nConsole\nAnnee\nTitre\n\n\n\n\n0\nGameBoy\n1983\nTetris\n\n\n1\nPlaystation\n1994\nCall-of-duty\n\n\n2\nGameBoy-ADV\n2001\nEmeraude\n\n\n3\nXBox\n2001\nFarming-simulator\n\n\n\n\n\n\n\n\nUne fois le DataFrame crée nous pouvons chercher les informations qui nous interesse. Par exemple dans le DatAFrame nous pouvons cherhcer plusieur chose comme:\n\ndf.Titre.value_counts().head() # Permet de compter dans ‘titre’ combien de fois se répète les titres des jeux\n\n\n df.Titre.value_counts().head()\n\nTitre\nTetris               1\nCall-of-duty         1\nEmeraude             1\nFarming-simulator    1\nName: count, dtype: int64\n\n\n\npd.crosstab(df.Annee, df.Titre) # Permet de créer un tableau qui selectionne les ‘Annee’des titre sortie par les ’Titre’\n\n\n pd.crosstab(df.Annee, df.Titre)\n\n\n\n\n\n\n\n\nTitre\nCall-of-duty\nEmeraude\nFarming-simulator\nTetris\n\n\nAnnee\n\n\n\n\n\n\n\n\n1983\n0\n0\n0\n1\n\n\n1994\n1\n0\n0\n0\n\n\n2001\n0\n1\n1\n0\n\n\n\n\n\n\n\n\n\nPour visualiser une seule colonne on peut: df[“Titre”]\n\n\n df[\"Titre\"] \n\n0               Tetris\n1         Call-of-duty\n2             Emeraude\n3    Farming-simulator\nName: Titre, dtype: object"
  },
  {
    "objectID": "Sommaire.html#cest-quoi-pandas",
    "href": "Sommaire.html#cest-quoi-pandas",
    "title": "introduction python Pandas",
    "section": "",
    "text": "Pandas est un bibliotheque utiliser dans python utilisé pour l’analyse de donnée. Elle offre des structures de données flexibles et puissantes pour travailler avec des données tabulaires et temporelles. Voici quelques points clés à retenir sur Pandas :\nStructures de données principales : - DataFrame : Un tableau bidimensionnel avec des lignes et des colonnes étiquetées, similaire à une feuille de calcul Excel ou à une table SQL. - Series : Une structure unidimensionnelle similaire à un tableau ou une liste, mais avec des fonctionnalités supplémentaires, comme un index.\nPandas est largement utilisé dans le domaine de la science des données, de l’analyse de données, de la finance et de nombreux autres domaines où la manipulation et l’analyse de données sont nécessaires.\nPandas est un bibliotheque utiliser dans python utilisé pour l’analyse de donnée. Elle offre des structures de données flexibles et puissantes pour travailler avec des données tabulaires et temporelles. Voici quelques points clés à retenir sur Pandas :\nStructures de données principales : - DataFrame : Un tableau bidimensionnel avec des lignes et des colonnes étiquetées, similaire à une feuille de calcul Excel ou à une table SQL. - Series : Une structure unidimensionnelle similaire à un tableau ou une liste, mais avec des fonctionnalités supplémentaires, comme un index.\nPandas est largement utilisé dans le domaine de la science des données, de l’analyse de données, de la finance et de nombreux autres domaines où la manipulation et l’analyse de données sont nécessaires."
  },
  {
    "objectID": "Data visualisation.html",
    "href": "Data visualisation.html",
    "title": "Data visualisation",
    "section": "",
    "text": "La visualisation de données en Python, c’est l’art de représenter des informations complexes sous forme de graphiques, de tableaux ou d’autres éléments visuels faciles à comprendre. En utilisant des bibliothèques comme Matplotlib, Seaborn ou Plotly, les développeurs peuvent transformer des données brutes en visualisations attrayantes et informatives, ce qui permet à quiconque, même sans connaissances techniques avancées, de tirer des conclusions à partir des données.\nImport des bibliotheques utile pour la Data Visualisation Pour faire de la Data Visualisation de nos données nous avons besoins d’importer “Matplotlib”\nil ets possible de faire plusieurs graphiques differents: - histogramme = “hist” -&gt; plt.hist(“les données utile sur les axes”) - diagramme en barre = “bar” -&gt; plt.bar(“les données utile sur les axes”) - boite a moustache =” boxplot” -&gt; plt.boxplot(“les données utile sur les axes”) - nuage de point = “scatterplot” -&gt; plt.scatter(“les données utile sur les axes”)\nPour les graphiques d’un dataframe il faut mettre “df.plot.(plus le nom du graphique besoins)”, par exemple pour une boite a moustache on mettra “df.plot.box”.\nNous allons voir le diagramme en barre\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nOn utilisera la meme base de donnée que pour l’introduction afin de crée le graphique\n\nJeux = [\n    [\"GameBoy\", 1500, \"Tetris\"],\n    [\"Playstation\", 1994, \"Call-of-duty\"],\n    [\"GameBoy-ADV\", 520, \"Emeraude\"],\n    [\"XBox\", 2001, \"Farming-simulator\"]\n]\ncolumns = ['Console', 'Annee', 'Titre']\n\ndf = pd.DataFrame(Jeux, columns=columns)\n\n# Permet de generer un graphique en bar\ndf.plot.bar( x='Console', y='Annee')\n\n\n\n\n\n\n\n\nOn peut egalement mettre un titre general et sur les axes X et Y du graphique et changer la couleur\n\n# Permet de generer un graphique en bar\ndf.plot.bar( x='Console', y='Annee', color='skyblue')\n\n# permet de modifier le titre et le nom des axes\nplt.xlabel('Console')\nplt.ylabel('Année de sortie')\nplt.title('Consoles de jeux vidéo par année de sortie')\n\nText(0.5, 1.0, 'Consoles de jeux vidéo par année de sortie')\n\n\n\n\n\n\n\n\n\nRegardons la boite a moustache\n\ndf.plot.box( x='Console', y='Annee')"
  },
  {
    "objectID": "Data visualisation.html#la-data-visualisation-cest-quoi",
    "href": "Data visualisation.html#la-data-visualisation-cest-quoi",
    "title": "Data visualisation",
    "section": "",
    "text": "La visualisation de données en Python, c’est l’art de représenter des informations complexes sous forme de graphiques, de tableaux ou d’autres éléments visuels faciles à comprendre. En utilisant des bibliothèques comme Matplotlib, Seaborn ou Plotly, les développeurs peuvent transformer des données brutes en visualisations attrayantes et informatives, ce qui permet à quiconque, même sans connaissances techniques avancées, de tirer des conclusions à partir des données.\nImport des bibliotheques utile pour la Data Visualisation Pour faire de la Data Visualisation de nos données nous avons besoins d’importer “Matplotlib”\nil ets possible de faire plusieurs graphiques differents: - histogramme = “hist” -&gt; plt.hist(“les données utile sur les axes”) - diagramme en barre = “bar” -&gt; plt.bar(“les données utile sur les axes”) - boite a moustache =” boxplot” -&gt; plt.boxplot(“les données utile sur les axes”) - nuage de point = “scatterplot” -&gt; plt.scatter(“les données utile sur les axes”)\nPour les graphiques d’un dataframe il faut mettre “df.plot.(plus le nom du graphique besoins)”, par exemple pour une boite a moustache on mettra “df.plot.box”.\nNous allons voir le diagramme en barre\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nOn utilisera la meme base de donnée que pour l’introduction afin de crée le graphique\n\nJeux = [\n    [\"GameBoy\", 1500, \"Tetris\"],\n    [\"Playstation\", 1994, \"Call-of-duty\"],\n    [\"GameBoy-ADV\", 520, \"Emeraude\"],\n    [\"XBox\", 2001, \"Farming-simulator\"]\n]\ncolumns = ['Console', 'Annee', 'Titre']\n\ndf = pd.DataFrame(Jeux, columns=columns)\n\n# Permet de generer un graphique en bar\ndf.plot.bar( x='Console', y='Annee')\n\n\n\n\n\n\n\n\nOn peut egalement mettre un titre general et sur les axes X et Y du graphique et changer la couleur\n\n# Permet de generer un graphique en bar\ndf.plot.bar( x='Console', y='Annee', color='skyblue')\n\n# permet de modifier le titre et le nom des axes\nplt.xlabel('Console')\nplt.ylabel('Année de sortie')\nplt.title('Consoles de jeux vidéo par année de sortie')\n\nText(0.5, 1.0, 'Consoles de jeux vidéo par année de sortie')\n\n\n\n\n\n\n\n\n\nRegardons la boite a moustache\n\ndf.plot.box( x='Console', y='Annee')"
  },
  {
    "objectID": "introduction a numpy.html",
    "href": "introduction a numpy.html",
    "title": "Numpy?",
    "section": "",
    "text": "introduction à numpy\nNumPy est une bibliothèque Python utilisée principalement pour le calcul numérique. Elle fournit des structures de données de base telles que les tableaux multidimensionnels (ndarrays), ainsi que des fonctions permettant d’effectuer des opérations mathématiques et statistiques sur ces tableaux. Voici un résumé de ses principales fonctionnalités et utilisations :\nTableaux multidimensionnels(ndarrays) :\nNumPy permet de créer et de manipuler des tableaux efficacement.\nCes tableaux sont plus performants que les listes Python\npour le stockage de données numériques\n\nOpérations mathématiques et statistiques :\nNumPy fournit beaucoup de fonctions pour effectuer des opérations mathématiques \net statistiques sur les tableaux, telles que la somme, la moyenne, l'écart-type, etc.\n\nBroadcasting :\nNumPy utilise le broadcasting pour effectuer des opérations \nsur des tableaux de formes différentes de manière transparente. \nCela permet d'écrire du code plus concis et plus lisible.\n\nIntégration avec d'autres bibliothèques :\nNumPy est souvent utilisé en conjonction avec d'autres bibliothèques \nPython telles que Matplotlib(pour la visualisation de données),\nSciPy (pour les calculs scientifiques avancés), et Pandas (pour l'analyse de données).\n\nTraitement d'images et de sons :\nNumPy est largement utilisé pour le traitement d'images \net de sons en raison de sa capacité à manipuler efficacement des tableaux multidimensionnels.\nEn résumé, NumPy est une bibliothèque essentielle pour les applications nécessitant des calculs numériques rapides et efficaces en Python, tels que le calcul scientifique, l’apprentissage automatique, l’analyse de données, etc.\nmise a pratique numpy: Pour commencer avec numpy vous aurez besoin de l’installer, pour cela il faudra : “pip install numpy” Dans le terminal Une fois installé on va devoir l’importer dans python: “import numpy as np”\nLes tableaux (en anglais, array) peuvent être créés avec numpy.array(). On utilise des crochets pour délimiter les listes d’éléments dans les tableaux.\n\n# pip install numpy\nimport numpy as np\nA= np.array([2,6,3,9])\nprint(A)\n\n[2 6 3 9]\n\n\nil est possible de crée un tableau 2D:\n\nb = np.array([[1, 3, 6], [2, 4, 5]])\nprint(b)\n\n[[1 3 6]\n [2 4 5]]\n\n\nOn peut crée des tableau avec numpy en utilisant: np.random.randint\n\nc = np.random.randint(low=0, high=10, size=(10, 5))\nprint(c)\n\n[[8 7 9 4 4]\n [7 5 6 3 8]\n [2 7 3 2 9]\n [7 0 7 3 2]\n [9 0 4 6 3]\n [4 5 2 7 7]\n [2 3 6 5 8]\n [7 7 4 4 0]\n [1 2 9 5 0]\n [7 1 3 5 4]]\n\n\nOn peut crée créer des tableaux avec des valeurs dans un intervalle spécifié en utilisant La fonction: numpy.arange\n\nd = np.arange(0, 100, 3)\nprint(d)\n\n[ 0  3  6  9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69\n 72 75 78 81 84 87 90 93 96 99]\n\n\non peut utiliser plusieurs fonction arithmetique, “np.add(),np.subtract(),np.multiply(),np.divide(),np.power()” voici 2 example:\nmultiplication\n\na = np.array([1, 2, 3])\nresult = np.multiply(a, 5)\nprint(result) \n\nb=np.array([1,4,6])\nresult= np.subtract(b,5)\nprint(result)\n\n[ 5 10 15]\n[-4 -1  1]\n\n\nNous pouvons aussi utiliser la trigonometrie: “np.sin(),np.cos(),np.tan()”\n\nangles = np.array([0, np.pi/2, np.pi])\nsin_values = np.tan(angles)\nprint(sin_values)  \n\n[ 0.00000000e+00  1.63312394e+16 -1.22464680e-16]\n\n\nPour les fonction statistique nous utilisons: np.mean(),np.median(),np.std()\n\nE = np.array([2, 6, 7, 10])\nE = np.mean(E)\nprint(E) \n\n6.25\n\n\nPour en finir avec numpy nous pouvons arrondir les nombres avec: np.round(),np.floor(),np.ceil()\n\nF= np.array([np.pi*2,np.pi])\nF = np.round(F)\nprint(F) \n\n[6. 3.]"
  }
]